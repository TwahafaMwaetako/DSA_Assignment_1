// AUTO-GENERATED FILE.
// This file is auto-generated by the Ballerina OpenAPI tool.

import ballerina/http;

listener http:Listener ep0 = new (8080, config = {host: "localhost"});

isolated table<Lecturer> key(staffNumber) allLecturers = table [
{staffNumber: "20232200", officeNumber:"k7", title:"Mr", firstName: "Gerson", lastName: "Eichab", courses:[{courseCode: "DSA217S", coursName: "Data Structures", nqfLevel: "5"}]}];

isolated service /fci/api/v1 on ep0 {
    
    isolated resource function get lecturers() returns Lecturer[]|http:Response {
    lock{
    return allLecturers.toArray().clone();
    }
    }
    
    
    isolated resource function post lecturers(@http:Payload Lecturer payload) returns Inline_response_201|http:Response {
    lock{
    allLecturers.add(payload);
    }
    http:Response lecturerAdded =new;
    return lecturerAdded;
    }
    
    
    isolated resource function get lecturers/staff/[string staffNumber]() returns Lecturer|http:Response {
    Lecturer? lecturer;
    lock{
    lecturer = allLecturers[staffNumber];
    }
      if lecturer is () {
    http:Response lecturerNotFound =new;
    return lecturerNotFound;
     } else {
        return lecturer;
    }
    }
    
    
    isolated resource function put lecturers/staff/[string staffNumber](@http:Payload Lecturer payload) returns Lecturer|http:Response {
    lock{
    allLecturers.put(payload);
    }
    http:Response lecturerUpdated =new;
    return lecturerUpdated;
    }
    
   
    isolated resource function delete lecturers/staff/[string staffNumber]() returns http:NoContent|http:Response {
    Lecturer? delLecturer;
    lock{
    delLecturer = allLecturers[staffNumber];
    }
     if delLecturer is () {
        http:Response lecturerNotFound =new;
        return lecturerNotFound;
        } else {
    lock{    
    _ = allLecturers.remove(staffNumber);
    }
    http:Response lecturerRemoved =new;
    return lecturerRemoved;
    }
    }
       
    isolated resource function get lecturers/office/[string officeNumber]() returns Lecturer[]|http:Response {
    table<Lecturer> key(staffNumber) emptyTable = table [];
    table<Lecturer> key(staffNumber) officeFilter;
    lock{
    officeFilter = allLecturers.clone();
    }
    if (officeFilter == emptyTable){
    http:Response noLecInOffice = new;
    return noLecInOffice;
    } else {
    return officeFilter.filter(sameOffice=> sameOffice.officeNumber == officeNumber).toArray();
}
}
}
